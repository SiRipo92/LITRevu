name: Python CI (lint + tests)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write  # needed to commit flake8_report back to the repo on push to main

jobs:
  lint:
    name: Lint with flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-html anybadge
          pip install -r requirements.txt

      - name: Generate fresh flake8 HTML report (non-fatal) and badge
        id: lint_report
        run: |
          # 1) Clean & recreate the report directory so it never accumulates files
          rm -rf flake8_report
          mkdir -p flake8_report

          # 2) Non-fatal HTML report for browsing
          #    (respects your .flake8 config; errors don't stop the job here)
          flake8 . --format=html --htmldir=flake8_report || true

          # 3) Capture strict status without failing the step
          set +e
          flake8 .
          STATUS=$?
          set -e

          # 4) Create/update a badge.svg reflecting the strict status
          mkdir -p flake8_report
          if [ "$STATUS" -eq 0 ]; then
            anybadge --label "flake8" --value "passing" --color "#28a745" --output flake8_report/badge.svg
          else
            anybadge --label "flake8" --value "failing" --color "#cb2431" --output flake8_report/badge.svg
          fi

          # 5) Propagate strict status to subsequent steps via an output
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: Strict gate (fail job if lint errors)
        # Use the captured status to fail this step (and job), but later steps with "if: always()" still run
        run: |
          if [ "${{ steps.lint_report.outputs.status }}" != "0" ]; then
            echo "flake8 found issues."
            exit 1
          fi

      - name: Upload flake8 report as artifact (html + badge)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flake8_report
          path: flake8_report/**

      - name: Commit updated flake8 report to repo (for README badge)
        if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          git config user.name "SiRipo92"
          git config user.email "ripochesierra@gmail.com"
          # add/remove changed files in this folder only
          git add -A flake8_report
          git commit -m "CI: update flake8 HTML report & badge [skip ci]" || echo "No changes to commit"
          git push

  tests:
    name: Django tests + coverage (nose2)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'   # or '3.11' to align with lint if you prefer
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage (nose2 via temp runner + Django test DB)
        env:
          PYTHONUNBUFFERED: "1"
          DJANGO_SETTINGS_MODULE: "LITRevu.settings"
        run: |
          coverage erase

          # Temporary runner that sets up Django test env & DB, runs nose2, then tears down
          cat > nose2_ci_runner.py << 'PYCODE'
          import sys
          import django
          from django.test.utils import setup_test_environment, teardown_test_environment
          from django.test.runner import DiscoverRunner
          
          django.setup()
          setup_test_environment()
          runner = DiscoverRunner(verbosity=1, interactive=False)
          old_config = runner.setup_databases()
          try:
              from nose2 import discover
              code = discover()
          finally:
              runner.teardown_databases(old_config)
              teardown_test_environment()
          sys.exit(code)
          PYCODE

          # Run only users/ and reviews/ tests
          coverage run nose2_ci_runner.py -v users reviews
          coverage report -m
          coverage xml
          coverage html
          rm -f nose2_ci_runner.py

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/**
